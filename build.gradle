/*
 *    Copyright 2020 Vasyl Rudas
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 *
 */

plugins {
    id "java"
    id "jacoco"
    id "org.sonarqube" version "2.8"
}

wrapper {
    gradleVersion = "6.1"
    distributionType = Wrapper.DistributionType.ALL
}

def allJacocoTestReportFile = project.file("$buildDir/jacoco/allJacocoTestReport/allJacocoTestReport.xml")

sonarqube {
    properties {
        property "sonar.projectKey", "vrudas_lp4k"
        property "sonar.organization", "vrudas"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", allJacocoTestReportFile
    }
}

allprojects {
    group = "io.nixel"

    repositories {
        jcenter()
    }

    apply plugin: 'jacoco'
    apply plugin: 'java'

    jacoco {
        toolVersion = "0.8.5"
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

tasks.create(name: "allJacocoTestReport", type: JacocoReport.class) {
    reports {
        xml.enabled true
    }

    executionData(
            rootProject.fileTree(rootDir.getAbsolutePath()).include("**/build/jacoco/*.exec")
    )

    sourceSets(
            rootProject.subprojects
                    .collect { project -> project.getConvention() }
                    .collect { convention -> convention.findPlugin(JavaPluginConvention.class) }
                    .findAll { javaPlugin -> javaPlugin != null }
                    .collect { javaPlugin -> javaPlugin.getSourceSets().getByName("main") }
                    .findAll { mainSourceSet -> mainSourceSet != null }
                    as SourceSet[]
    )
}